---
import categories from "../data/categories.json";

const categoryNames = Object.keys(categories);
---

<div id="map" class="w-screen h-screen"></div>
<div id="geocoder"></div>
<div
	class="sm:w-[500px] text-sm w-full flex flex-col gap-2 absolute bottom-10 rounded-md z-10 bg-white p-4 left-1/2 transform -translate-x-1/2"
>
	<div>
		<p class="text-md font-semibold" id="title">Census 2022</p>
		<p class="mb-2">Scotland</p>
	</div>
	<div>
		<div class="w-full h-4 rounded" id="gradient"></div>
		<div class="flex justify-between">
			<span id="min"></span>
			<span id="max"></span>
		</div>
	</div>
	<div>
		<select id="category" class="w-full p-2 rounded border">
			{
				categoryNames.map((category) => (
					<option value={category}>{category}</option>
				))
			}
		</select>

		<select id="dataset" class="w-full p-2 rounded border">
			{
				categories[categoryNames[0]].map((option) => (
					<option value={option}>{option}</option>
				))
			}
		</select>
	</div>
	<div>
		<select id="outlierSelect" class="w-full p-2 rounded border">
			<option value="normal">Normal Range</option>
			<option value="outliers">Include Outliers</option>
		</select>
	</div>
	<div id="hover">Hover over a point to see its value.</div>
</div>

<link
	href="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css"
	rel="stylesheet"
/>

<script>
	import { GeoJsonLayer } from "@deck.gl/layers";
	import { MapboxOverlay } from "@deck.gl/mapbox";
	import { MVTLayer } from "@deck.gl/geo-layers";
	import { MaskExtension } from "@deck.gl/extensions";
	import mapboxgl from "mapbox-gl";
	import statistics from "../data/statistics.json";
	import keyMapping from "../data/key_mapping.json";
	import categoryMapping from "../data/category_mapping.json";
	import categories from "../data/categories.json";
	import { rgb } from "d3-color";

	const MAPBOX_TOKEN = import.meta.env.PUBLIC_MAPBOX_TOKEN;

	const categoryNames = Object.keys(categories);
	const colors = ["#ca0020", "#f4a582", "#f7f7f7", "#92c5de", "#0571b0"];

	const map = new mapboxgl.Map({
		container: "map",
		style: "mapbox://styles/mapbox/dark-v11",
		center: [-4.2026, 56.4907],
		zoom: 6,
		minZoom: 6,
		maxZoom: 17,
		accessToken: MAPBOX_TOKEN,
		antialias: true,
		projection: { name: "mercator" },
	});

	const categorySelect = document.getElementById("category");
	const datasetSelect = document.getElementById("dataset");
	const outlierSelect = document.getElementById("outlierSelect");
	const hoverElement = document.getElementById("hover");

	let currentMaskLayer;
	let currentAreaLayer;
	let firstLabelLayerId;

	const deckOverlay = new MapboxOverlay({
		interleaved: true,
		layers: [],
	});

	map.addControl(deckOverlay);

	function createAreaLayer(categoryMapped, newName, low, high, name) {
		const thresholds = [
			low,
			low + (high - low) / 4,
			low + (high - low) / 2,
			low + (3 * (high - low)) / 4,
			high,
		];

		return new MVTLayer({
			id: "area-layer",
			data: `https://map.jacobweinbren.workers.dev/scottish-areas-${categoryMapped}/{z}/{x}/{y}.mvt`,
			getFillColor: (d) => {
				const value = d.properties[newName];
				if (value === null) return [0, 0, 0, 0];
				const colorIndex =
					value < thresholds[0]
						? 0
						: value < thresholds[1]
							? 1
							: value < thresholds[2]
								? 2
								: value < thresholds[3]
									? 3
									: 4;
				const { r, g, b } = rgb(colors[colorIndex]);
				return [r, g, b, 255];
			},
			updateTriggers: {
				getFillColor: [low, high],
			},
			extensions: [new MaskExtension()],
			maskId: "mask-layer",
			beforeId: firstLabelLayerId,
		});
	}

	function createBackgroundLayer(categoryMapped, newName, name) {
		return new MVTLayer({
			id: "background-layer",
			data: `https://map.jacobweinbren.workers.dev/scottish-areas-${categoryMapped}/{z}/{x}/{y}.mvt`,
			getFillColor: () => [0, 0, 0, 0], 
			pickable: true,
			onHover: (info) => {
				if (info.object) {
					const value = parseFloat(
						info.object.properties[newName]
					).toFixed(1);
					hoverElement.innerHTML = `This census area is <span class="font-semibold">${value}%</span> of the variable <span class="font-semibold">${name}</span>`;
				} else {
					hoverElement.innerHTML =
						"Hover over a point to see its value.";
				}
			},
		});
	}

	function updateLegend(category, name, outlierMode) {
		const stats = statistics[category][name];
		const low = outlierMode === "outliers" ? stats.outlierLow : stats.low;
		const high =
			outlierMode === "outliers" ? stats.outlierHigh : stats.high;

		document.getElementById("gradient").style.background =
			`linear-gradient(to right, ${colors.join(", ")})`;
		document.getElementById("min").textContent = `${low.toFixed(1)}%`;
		document.getElementById("max").textContent = `${high.toFixed(1)}%`;
	}

	function loadDataset(category, name) {
		const outlierMode = (outlierSelect as HTMLSelectElement).value;
		const categoryMapped = categoryMapping[category];
		const newName = keyMapping[name];

		const stats = statistics[categoryMapped][name];
		const low = outlierMode === "outliers" ? stats.outlierLow : stats.low;
		const high =
			outlierMode === "outliers" ? stats.outlierHigh : stats.high;

		currentAreaLayer = createAreaLayer(
			categoryMapped,
			newName,
			low,
			high,
			name
		);
		const backgroundLayer = createBackgroundLayer(categoryMapped, newName, name);

		deckOverlay.setProps({
			layers: [currentMaskLayer, backgroundLayer, currentAreaLayer],
		});

		updateLegend(categoryMapped, name, outlierMode);
	}

	map.on("load", () => {
		firstLabelLayerId = map
			.getStyle()
			.layers.find((layer) => layer.type === "symbol").id;

		currentMaskLayer = new MVTLayer({
			id: "mask-layer",
			data: "https://map.jacobweinbren.workers.dev/uk-cleaned/{z}/{x}/{y}.mvt",
			binary: false,
			operation: "mask",
			renderSubLayers: (props) => {
				const layer = new GeoJsonLayer({
					...props,
					getFillColor: [255, 255, 255],
					lineWidthMinPixels: 1,
				});
				return [layer];
			},
			beforeId: firstLabelLayerId,
		});

		categorySelect.addEventListener("change", () => {
			const category = (categorySelect as HTMLSelectElement).value;
			const datasets = categories[category];
			datasetSelect.innerHTML = "";
			datasets.forEach((dataset) => {
				const option = document.createElement("option");
				option.value = dataset;
				option.textContent = dataset;
				datasetSelect.appendChild(option);
			});
			loadDataset(category, datasets[0]);
		});

		datasetSelect.addEventListener("change", () => {
			const category = (categorySelect as HTMLSelectElement).value;
			const dataset = (datasetSelect as HTMLSelectElement).value;
			loadDataset(category, dataset);
		});

		outlierSelect.addEventListener("change", () => {
			const category = (categorySelect as HTMLSelectElement).value;
			const dataset = (datasetSelect as HTMLSelectElement).value;
			loadDataset(category, dataset);
		});

		loadDataset(categoryNames[0], categories[categoryNames[0]][0]);
	});
</script>
