---
import categories from "../data/categories.json";

const categoryNames = Object.keys(categories);
---

<div id="map" class="w-screen h-screen"></div>
<div id="geocoder" class="geocoder fixed top-4 left-4 z-10"></div>
<div
	class="sm:w-[500px] text-sm w-full flex flex-col gap-2 absolute bottom-10 rounded-md z-10 bg-white p-4 left-1/2 transform -translate-x-1/2"
>
	<div>
		<p class="text-md font-semibold" id="title">Census 2022</p>
		<p class="mb-2">Scotland</p>
	</div>
	<div>
		<div class="w-full h-4 rounded" id="gradient"></div>
		<div class="flex justify-between">
			<span id="min"></span>
			<span id="max"></span>
		</div>
	</div>
	<div>
		<select id="category" class="w-full p-2 rounded border">
			{
				categoryNames.map((category) => (
					<option value={category}>{category}</option>
				))
			}
		</select>

		<select id="dataset" class="w-full p-2 rounded border">
			{
				categories[categoryNames[0]].map((option) => (
					<option value={option}>{option}</option>
				))
			}
		</select>
	</div>
	<div>
		<select id="outlierSelect" class="w-full p-2 rounded border">
			<option value="normal">Normal Range</option>
			<option value="outliers">Include Outliers</option>
		</select>
	</div>
	<div id="hover">Hover over a point to see its value.</div>
</div>

<script>
	import mapboxgl from "mapbox-gl";
	import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";
	import chroma from "chroma-js";
	import statistics from "../data/statistics.json";
	import keyMapping from "../data/key_mapping.json";
	import categoryMapping from "../data/category_mapping.json";
	import categories from "../data/categories.json";

	const categoryNames = Object.keys(categories);

	const MAPBOX_TOKEN = import.meta.env.PUBLIC_MAPBOX_TOKEN;

	function getColorScale(category, name, outlierMode) {
		const stats = statistics[category][name];
		const low = outlierMode === "outliers" ? stats.outlierLow : stats.low;
		const high =
			outlierMode === "outliers" ? stats.outlierHigh : stats.high;

		const colorPalette = [
			"#ca0020",
			"#f4a582",
			"#f7f7f7",
			"#92c5de",
			"#0571b0",
		];
		const domain = [low, (low + high) / 2, high];
		return chroma.scale(colorPalette).domain(domain).mode("lch");
	}

	const map = new mapboxgl.Map({
		container: "map",
		style: "mapbox://styles/mapbox/dark-v11",
		center: [-4.2026, 56.4907],
		minZoom: 5,
		maxZoom: 17,
		zoom: 6,
		accessToken: MAPBOX_TOKEN,
		antialias: true,
	});

	const geocoder = new MapboxGeocoder({
		accessToken: MAPBOX_TOKEN,
		mapboxgl: mapboxgl,
	});
	document.getElementById("geocoder").appendChild(geocoder.onAdd(map));

	map.addControl(new mapboxgl.NavigationControl());

	function updateLegend(category, name, outlierMode) {
		const stats = statistics[category][name];
		const low = outlierMode === "outliers" ? stats.outlierLow : stats.low;
		const high =
			outlierMode === "outliers" ? stats.outlierHigh : stats.high;

		const colorScale = getColorScale(category, name, outlierMode);
		const colors = colorScale.colors(5).map((color, index) => {
			const value = low + (index * (high - low)) / 4;
			return value === 0 ? "#ca0020" : color;
		});

		document.getElementById("gradient").style.background =
			`linear-gradient(to right, ${colors.join(", ")})`;
		document.getElementById("min").textContent = `${low.toFixed(1)}%`;
		document.getElementById("max").textContent = `${high.toFixed(1)}%`;
	}

	function loadDataset(category, name) {
		const firstLabelLayerId = map
			.getStyle()
			.layers.find((layer) => layer.type === "symbol").id;

		const outlierMode = (
			document.getElementById("outlierSelect") as HTMLSelectElement
		).value;
		const categoryMapped = categoryMapping[category];
		const newName = keyMapping[name];
		const colorScale = getColorScale(categoryMapped, name, outlierMode);

		const stats = statistics[categoryMapped][name];
		const low = outlierMode === "outliers" ? stats.outlierLow : stats.low;
		const high =
			outlierMode === "outliers" ? stats.outlierHigh : stats.high;

		// Remove existing sources and layers if they exist
		if (map.getLayer("areas")) {
			map.removeLayer("areas");
			map.removeSource("areas");
		}

		if (map.getLayer("intersected")) {
			map.removeLayer("intersected");
			map.removeSource("intersected");
		}

		// Add new sources and layers
		map.addSource("areas", {
			type: "vector",
			tiles: [
				`https://map.jacobweinbren.workers.dev/scottish-areas-${categoryMapped}/{z}/{x}/{y}.mvt`,
			],
			minzoom: 0,
			maxzoom: 22,
		});

		map.addLayer(
			{
				id: "areas",
				type: "fill",
				source: "areas",
				"source-layer": "maplayer",
				paint: {
					"fill-color": "rgba(0, 0, 0, 0)",
				},
			},
			firstLabelLayerId
		);

		map.addSource("intersected", {
			type: "vector",
			tiles: [
				`https://map.jacobweinbren.workers.dev/scottish-intersected-${categoryMapped}/{z}/{x}/{y}.mvt`,
			],
			minzoom: 0,
			maxzoom: 22,
		});

		const fillColor = [
			low,
			colorScale(low).hex(),
			(low + high) / 4,
			colorScale((low + high) / 4).hex(),
			(low + high) / 2,
			colorScale((low + high) / 2).hex(),
			(low + high) * 0.75,
			colorScale((low + high) * 0.75).hex(),
			high,
			colorScale(high).hex(),
		];

		// Ensure the numeric values are in ascending order and unique, and set color for zero values
		const uniqueSortedFillColor = fillColor
			.reduce((acc, val, index, arr) => {
				if (index % 2 === 0) {
					let color = arr[index + 1];
					if (val === 0) {
						color = "#ca0020";
					}
					if (!acc.find((item) => item[0] === val)) {
						acc.push([val, color]);
					}
				}
				return acc;
			}, [])
			.sort((a, b) => a[0] - b[0]);

		// Flatten the sorted and unique array
		const flatSortedFillColor = uniqueSortedFillColor.reduce(
			(acc, val) => acc.concat(val),
			[]
		);

		map.addLayer(
			{
				id: "intersected",
				type: "fill",
				source: "intersected",
				"source-layer": "maplayer",
				paint: {
					"fill-color": [
						"interpolate",
						["linear"],
						["to-number", ["get", newName]],
						...flatSortedFillColor,
					],
					"fill-opacity": 1,
				},
			},
			firstLabelLayerId
		);

		updateLegend(categoryMapped, name, outlierMode);

		map.on("mousemove", "areas", (e) => {
			const features = map.queryRenderedFeatures(e.point, {
				layers: ["areas"],
			});

			if (features.length > 0) {
				const feature = features[0];
				const value = feature.properties[newName];
				document.getElementById("hover").innerHTML =
					`This area is <b>${parseFloat(value).toFixed(1)}%</b> of the variable <b>${name}</b>`;
			} else {
				document.getElementById("hover").textContent =
					"Hover over a point to see its value.";
			}
		});

		map.on("mouseleave", "areas", () => {
			document.getElementById("hover").textContent =
				"Hover over a point to see its value.";
		});
	}

	const categorySelect = document.getElementById(
		"category"
	) as HTMLSelectElement;
	const datasetSelect = document.getElementById(
		"dataset"
	) as HTMLSelectElement;

	categorySelect.addEventListener("change", (e) => {
		const category = (e.target as HTMLSelectElement).value;
		datasetSelect.innerHTML = "";
		categories[category].forEach((option) => {
			const optionElement = document.createElement("option");
			optionElement.value = option;
			optionElement.textContent = option;
			datasetSelect.appendChild(optionElement);
		});
		// Load the first dataset of the newly selected category
		loadDataset(category, categories[category][0]);
	});

	datasetSelect.addEventListener("change", (e) => {
		const name = (e.target as HTMLSelectElement).value;
		const category = categorySelect.value;
		loadDataset(category, name);
	});

	// Initial load of the map with the first category and dataset
	map.on("load", () => {
		const initialCategory = categoryNames[0];
		const initialName = categories[initialCategory][0];
		loadDataset(initialCategory, initialName);
	});

	document.getElementById("outlierSelect").addEventListener("change", () => {
		const category = categorySelect.value;
		const name = datasetSelect.value;
		loadDataset(category, name);
	});
</script>
