---
import categories from "../data/categories.json";

const categoryNames = Object.keys(categories);
---

<div id="map" class="w-screen h-screen"></div>
<div id="geocoder"></div>
<div
	class="sm:w-[500px] text-sm w-full flex flex-col gap-2 absolute bottom-10 rounded-md z-10 bg-white p-4 left-1/2 transform -translate-x-1/2"
>
	<div>
		<p class="text-md font-semibold" id="title">Census 2022</p>
		<p class="mb-2">Scotland</p>
	</div>
	<div>
		<div class="w-full h-4 rounded" id="gradient"></div>
		<div class="flex justify-between">
			<span id="min"></span>
			<span id="max"></span>
		</div>
	</div>
	<div>
		<select id="category" class="w-full p-2 rounded border">
			{
				categoryNames.map((category) => (
					<option value={category}>{category}</option>
				))
			}
		</select>

		<select id="dataset" class="w-full p-2 rounded border">
			{
				categories[categoryNames[0]].map((option) => (
					<option value={option}>{option}</option>
				))
			}
		</select>
	</div>
	<div>
		<select id="outlierSelect" class="w-full p-2 rounded border">
			<option value="normal">Normal Range</option>
			<option value="outliers">Include Outliers</option>
		</select>
	</div>
	<div id="hover">Hover over a point to see its value.</div>
</div>

<link
	rel="stylesheet"
	href="https://js.arcgis.com/4.21/esri/themes/light/main.css"
/>
<script>
	import Map from "@arcgis/core/Map";
	import MapView from "@arcgis/core/views/MapView";
	import VectorTileLayer from "@arcgis/core/layers/VectorTileLayer";
	import Search from "@arcgis/core/widgets/Search";
	import Extent from "@arcgis/core/geometry/Extent";

	import LocatorSearchSource from "@arcgis/core/widgets/Search/LocatorSearchSource";
	import GroupLayer from "@arcgis/core/layers/GroupLayer";
	import statistics from "../data/statistics.json";
	import keyMapping from "../data/key_mapping.json";
	import categoryMapping from "../data/category_mapping.json";
	import categories from "../data/categories.json";

	const categoryNames = Object.keys(categories);

	// Style configurations for Scottish buildings and areas
	const buildingsStyle = {
		sources: {
			"scottish-buildings": {
				type: "vector",
				tiles: [
					"https://map.jacobweinbren.workers.dev/uk-cleaned/{z}/{x}/{y}.mvt",
				],
				minzoom: 0,
				maxzoom: 17,
			},
		},
		layers: [
			{
				id: "buildings-layer",
				type: "fill",
				source: "scottish-buildings",
				"source-layer": "buildings",
				minzoom: 0,
				maxzoom: 17,
			},
		],
	};

	const areasStyle = {
		sources: {
			"scottish-areas": {
				type: "vector",
				tiles: [
					"https://map.jacobweinbren.workers.dev/scottish-areas-ages/{z}/{x}/{y}.mvt",
				],
				minzoom: 0,
				maxzoom: 17,
			},
		},
		layers: [
			{
				id: "areas-layer",
				type: "fill",
				source: "scottish-areas",
				"source-layer": "maplayer",
				minzoom: 0,
				maxzoom: 17,
			},
		],
	};

	// Create VectorTileLayers with the defined styles
	const buildingsLayer = new VectorTileLayer({
		style: buildingsStyle,
		blendMode: "destination-in",
	});
	let areasLayer = new VectorTileLayer({ style: areasStyle });

	// Group layers with buildingsLayer on top to apply the mask
	let groupedLayers = new GroupLayer({
		layers: [areasLayer, buildingsLayer],
	});

	// Initialize the map with the grouped layers
	let map = new Map({
		basemap: "dark-gray-vector",
		layers: [],
	});

	// Configure the MapView
	const mapView = new MapView({
		container: "map",
		map: map,
		zoom: 6,
		center: [-4.2026, 56.4907],
		constraints: {
			snapToZoom: false,
			maxZoom: 16,
		},
	});

	function addSearchWidget(view) {
		const scotlandExtent = new Extent({
			xmin: -7.57216793459,
			ymin: 54.6738309653,
			xmax: -1.63499077215,
			ymax: 60.8616542859,
			spatialReference: { wkid: 4326 },
		});

		const locatorSource = new LocatorSearchSource({
			url: "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer",
			filter: {
				geometry: scotlandExtent,
			},
			placeholder: "Find address or place",
			countryCode: "GBR", 
			maxResults: 6,
			maxSuggestions: 6,
			suggestionsEnabled: true,
			minSuggestCharacters: 3,
			zoomScale: 50000,
		});

		const searchWidget = new Search({
			view: view,
			sources: [locatorSource],
			includeDefaultSources: false,
		});

		view.ui.add(searchWidget, "top-right");
	}

	addSearchWidget(mapView);

	function updateLegend(category, name, outlierMode) {
		const stats = statistics[category][name];
		const low = outlierMode === "outliers" ? stats.outlierLow : stats.low;
		const high =
			outlierMode === "outliers" ? stats.outlierHigh : stats.high;

		const colors = ["#ca0020", "#f4a582", "#f7f7f7", "#92c5de", "#0571b0"];

		document.getElementById("gradient").style.background =
			`linear-gradient(to right, ${colors.join(", ")})`;
		document.getElementById("min").textContent = `${low.toFixed(1)}%`;
		document.getElementById("max").textContent = `${high.toFixed(1)}%`;
	}

	function loadDataset(category, name) {
		const outlierSelect = document.getElementById(
			"outlierSelect"
		) as HTMLSelectElement;
		const outlierMode = outlierSelect.value;
		const categoryMapped = categoryMapping[category];
		const newName = keyMapping[name];
		const stats = statistics[categoryMapped][name];

		const low = outlierMode === "outliers" ? stats.outlierLow : stats.low;
		const high =
			outlierMode === "outliers" ? stats.outlierHigh : stats.high;

		// Update the tile URL and rebuild the areas layer
		areasStyle.sources["scottish-areas"].tiles = [
			`https://map.jacobweinbren.workers.dev/scottish-areas-${categoryMapped}/{z}/{x}/{y}.mvt`,
		];
		areasLayer = new VectorTileLayer({ style: areasStyle });
		groupedLayers = new GroupLayer({
			layers: [areasLayer, buildingsLayer],
		});

		// Define fill color expression
		const fillColorExpression = [
			"case",
			["==", ["get", newName], null],
			"transparent",
			[
				"interpolate",
				["linear"],
				["get", newName],
				low,
				"#ca0020",
				low + (high - low) / 4,
				"#f4a582",
				low + (high - low) / 2,
				"#f7f7f7",
				low + (3 * (high - low)) / 4,
				"#92c5de",
				high,
				"#0571b0",
			],
		];

		// Apply properties when layer is ready
		areasLayer
			.when(() => {
				areasLayer.setPaintProperties("areas-layer", {
					"fill-color": fillColorExpression,
					"fill-opacity": 1,
					"fill-outline-color": fillColorExpression,
				});
			})
			.catch((error) =>
				console.error("Error setting paint properties:", error)
			);

		map.layers.removeAll();
		map.layers.addMany([groupedLayers]);

		updateLegend(categoryMapped, name, outlierMode);
	}

	const categorySelect = document.getElementById("category");
	const datasetSelect = document.getElementById("dataset");

	categorySelect.addEventListener("change", (e) => {
		const category = (e.target as HTMLSelectElement).value;
		datasetSelect.innerHTML = "";
		categories[category].forEach((option) => {
			const optionElement = document.createElement("option");
			optionElement.value = option;
			optionElement.textContent = option;
			datasetSelect.appendChild(optionElement);
		});
		loadDataset(category, categories[category][0]);
	});

	datasetSelect.addEventListener("change", (e) => {
		const name = (e.target as HTMLSelectElement).value;
		const category = (categorySelect as HTMLSelectElement).value;
		loadDataset(category, name);
	});

	mapView.when(() => {
		const initialCategory = categoryNames[0];
		const initialName = categories[initialCategory][0];
		loadDataset(initialCategory, initialName);
	});

	document.getElementById("outlierSelect").addEventListener("change", () => {
		const category = (categorySelect as HTMLSelectElement).value;
		const name = (datasetSelect as HTMLSelectElement).value;
		loadDataset(category, name);
	});
</script>
